openapi: 3.0.3
info:
  title: Sistema de Gestión de Inventario API
  description: API RESTful para gestión de inventario construida con Node.js, Express y Sequelize.
  version: 1.0.0
  contact:
    name: API Support
    email: support@inventario.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Servidor de desarrollo
  - url: https://inventario-api.com/api
    description: Servidor de producción

paths:
  /health:
    get:
      summary: Verificar estado del servidor
      description: Endpoint para verificar que el servidor esté funcionando correctamente.
      tags:
        - Health
      responses:
        '200':
          description: Servidor funcionando correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00.000Z"

  /auth/login:
    post:
      summary: Iniciar sesión
      description: Autenticar usuario con email y contraseña.
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login exitoso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /auth/register:
    post:
      summary: Registrar nuevo usuario
      description: Crear una nueva cuenta de usuario.
      tags:
        - Autenticación
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
      responses:
        '201':
          description: Usuario creado exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User created successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /agents:
    get:
      summary: Listar todos los agentes
      description: Obtener lista de todos los agentes registrados.
      tags:
        - Agentes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de agentes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Agent'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Crear nuevo agente
      description: Registrar un nuevo agente en el sistema.
      tags:
        - Agentes
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentCreateInput'
      responses:
        '201':
          description: Agente creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /agents/{id}:
    get:
      summary: Obtener agente por ID
      description: Obtener información detallada de un agente específico.
      tags:
        - Agentes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Información del agente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentWithAssets'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Actualizar agente
      description: Actualizar información de un agente existente.
      tags:
        - Agentes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentUpdateInput'
      responses:
        '200':
          description: Agente actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Eliminar agente
      description: Eliminar un agente del sistema.
      tags:
        - Agentes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Agente eliminado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /assets:
    get:
      summary: Listar todos los activos
      description: Obtener lista de activos con filtros opcionales.
      tags:
        - Activos
      security:
        - bearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filtrar por estado del activo.
          schema:
            type: string
            enum: [active, in_repair, decommissioned]
            example: active
        - name: agentId
          in: query
          description: Filtrar por ID del agente asignado.
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Lista de activos.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Crear nuevo activo
      description: Registrar un nuevo activo en el inventario.
      tags:
        - Activos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetInput'
      responses:
        '201':
          description: Activo creado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /assets/{id}:
    get:
      summary: Obtener activo por ID
      description: Obtener información detallada de un activo específico.
      tags:
        - Activos
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Información del activo.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Actualizar activo
      description: Actualizar información de un activo existente.
      tags:
        - Activos
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetInput'
      responses:
        '200':
          description: Activo actualizado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Eliminar activo
      description: Eliminar un activo del inventario.
      tags:
        - Activos
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Activo eliminado exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /locations:
    get:
      summary: Listar todas las ubicaciones
      description: Obtener lista de todas las ubicaciones registradas.
      tags:
        - Ubicaciones
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de ubicaciones.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Crear nueva ubicación
      description: Registrar una nueva ubicación en el sistema.
      tags:
        - Ubicaciones
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationInput'
      responses:
        '201':
          description: Ubicación creada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /locations/{id}:
    get:
      summary: Obtener ubicación por ID
      description: Obtener información detallada de una ubicación específica.
      tags:
        - Ubicaciones
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Información de la ubicación.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Actualizar ubicación
      description: Actualizar información de una ubicación existente.
      tags:
        - Ubicaciones
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationInput'
      responses:
        '200':
          description: Ubicación actualizada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Eliminar ubicación
      description: Eliminar una ubicación del sistema.
      tags:
        - Ubicaciones
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Ubicación eliminada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /categories:
    get:
      summary: Listar todas las categorías
      description: Obtener lista de todas las categorías registradas.
      tags:
        - Categorías
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de categorías.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Crear nueva categoría
      description: Registrar una nueva categoría en el sistema.
      tags:
        - Categorías
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '201':
          description: Categoría creada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /categories/{id}:
    get:
      summary: Obtener categoría por ID
      description: Obtener información detallada de una categoría específica.
      tags:
        - Categorías
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Información de la categoría.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Actualizar categoría
      description: Actualizar información de una categoría existente.
      tags:
        - Categorías
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryInput'
      responses:
        '200':
          description: Categoría actualizada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Eliminar categoría
      description: Eliminar una categoría del sistema.
      tags:
        - Categorías
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Categoría eliminada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /nomenclatures:
    get:
      summary: Listar todas las nomenclaturas
      description: Obtener lista de todas las nomenclaturas registradas.
      tags:
        - Nomenclaturas
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de nomenclaturas.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Nomenclature'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      summary: Crear nueva nomenclatura
      description: Registrar una nueva nomenclatura en el sistema.
      tags:
        - Nomenclaturas
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NomenclatureInput'
      responses:
        '201':
          description: Nomenclatura creada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nomenclature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /nomenclatures/{id}:
    get:
      summary: Obtener nomenclatura por ID
      description: Obtener información detallada de una nomenclatura específica.
      tags:
        - Nomenclaturas
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Información de la nomenclatura.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nomenclature'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    put:
      summary: Actualizar nomenclatura
      description: Actualizar información de una nomenclatura existente.
      tags:
        - Nomenclaturas
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NomenclatureInput'
      responses:
        '200':
          description: Nomenclatura actualizada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Nomenclature'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Eliminar nomenclatura
      description: Eliminar una nomenclatura del sistema.
      tags:
        - Nomenclaturas
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: Nomenclatura eliminada exitosamente.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

  /reports/assets-by-agent:
    get:
      summary: Reporte de activos por agente
      description: Obtener un reporte que muestra todos los agentes con sus activos asignados.
      tags:
        - Reportes
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Reporte de activos por agente.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AgentWithAssets'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /upload:
    post:
      summary: Subir archivo
      description: Subir un archivo de imagen para asociar con un activo.
      tags:
        - Archivos
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Archivo de imagen (JPG, PNG, GIF, etc.).
      responses:
        '200':
          description: Archivo subido exitosamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  filePath:
                    type: string
                    example: "/files/file-1642089600000-123456789.jpg"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Token JWT obtenido del endpoint de login.

  parameters:
    Id:
      name: id
      in: path
      required: true
      description: ID del recurso.
      schema:
        type: integer
        example: 1

  responses:
    BadRequest:
      description: Solicitud incorrecta.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: No autorizado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Recurso no encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Error interno del servidor.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    # Schemas de Autenticación
    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "usuario@ejemplo.com"
        password:
          type: string
          format: password
          example: "password123"
    RegisterInput:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan@ejemplo.com"
        password:
          type: string
          format: password
          minLength: 6
          example: "password123"
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        email:
          type: string
          format: email
          example: "juan@ejemplo.com"

    # Schemas de Agente
    Agent:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        department:
          type: string
          example: "IT"
        dni:
          type: string
          nullable: true
          example: "12345678"
        role:
          $ref: '#/components/schemas/Role'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AgentCreateInput:
      type: object
      required:
        - name
        - department
        - roleId
      properties:
        name:
          type: string
          example: "Juan Pérez"
        department:
          type: string
          example: "IT"
        dni:
          type: string
          example: "12345678"
        roleId:
          type: integer
          description: ID del rol al que pertenece el agente.
          example: 1
    AgentUpdateInput:
      type: object
      properties:
        name:
          type: string
          example: "Juan Pérez"
        department:
          type: string
          example: "IT"
        dni:
          type: string
          example: "12345678"
        roleId:
          type: integer
          description: ID del rol al que pertenece el agente.
          example: 2
    AgentWithAssets:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Juan Pérez"
        department:
          type: string
          example: "IT"
        role:
          $ref: '#/components/schemas/Role'
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'

    # Schemas de Activo
    Asset:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Laptop Dell XPS"
        description:
          type: string
          nullable: true
          example: "Laptop para desarrollo"
        serialNumber:
          type: string
          example: "DL001"
        value:
          type: number
          format: decimal
          example: 1200.50
        purchaseDate:
          type: string
          format: date
          example: "2024-01-15"
        status:
          type: string
          enum: [active, in_repair, decommissioned]
          example: "active"
        imageUrl:
          type: string
          nullable: true
          example: "/files/laptop-image.jpg"
        agentId:
          type: integer
          example: 1
        locationId:
          type: integer
          nullable: true
          example: 1
        categoryId:
          type: integer
          nullable: true
          example: 1
        nomenclatureId:
          type: integer
          nullable: true
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AssetInput:
      type: object
      required:
        - name
        - serialNumber
        - value
        - purchaseDate
        - status
      properties:
        name:
          type: string
          example: "Laptop Dell XPS"
        description:
          type: string
          example: "Laptop para desarrollo"
        serialNumber:
          type: string
          example: "DL001"
        value:
          type: number
          format: decimal
          minimum: 0
          example: 1200.50
        purchaseDate:
          type: string
          format: date
          example: "2024-01-15"
        status:
          type: string
          enum: [active, in_repair, decommissioned]
          example: "active"
        imageUrl:
          type: string
          example: "/files/laptop-image.jpg"
        agentId:
          type: integer
          nullable: true
          example: 1
        locationId:
          type: integer
          nullable: true
          example: 1
        categoryId:
          type: integer
          nullable: true
          example: 1
        nomenclatureId:
          type: integer
          nullable: true
          example: 1

    # Schemas de Ubicación
    Location:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Oficina Principal"
        description:
          type: string
          nullable: true
          example: "Ubicación en la sede central"
        address:
          type: string
          nullable: true
          example: "123 Main St"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    LocationInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Oficina Principal"
        description:
          type: string
          example: "Ubicación en la sede central"
        address:
          type: string
          example: "123 Main St"

    # Schemas de Categoría
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Equipos Informáticos"
        description:
          type: string
          nullable: true
          example: "Computadoras, servidores, etc."
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CategoryInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: "Equipos Informáticos"
        description:
          type: string
          example: "Computadoras, servidores, etc."

    # Schemas de Nomenclatura
    Nomenclature:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Laptop"
        code:
          type: string
          example: "EQ-INF"
        description:
          type: string
          nullable: true
          example: "Código para equipos informáticos"
        type:
          type: string
          example: "Hardware"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    NomenclatureInput:
      type: object
      required:
        - name
        - code
        - type
      properties:
        name:
          type: string
          example: "Laptop"
        code:
          type: string
          example: "EQ-INF"
        description:
          type: string
          example: "Código para equipos informáticos"
        type:
          type: string
          example: "Hardware"
    NomenclatureUpdateInput:
      type: object
      properties:
        name:
          type: string
          example: "Laptop Actualizada"
        code:
          type: string
          example: "LT-UPD"
        description:
          type: string
          example: "Descripción actualizada"
        type:
          type: string
          example: "Software"

    # Schemas Genéricos
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Mensaje de error detallado."
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: "Operación realizada con éxito."